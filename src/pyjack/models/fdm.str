Model fdm;
Samples 1000;

Max EV = EV(Benefit);
Min 95P = PERCENTILE(NbrAlerts, 95);

# Financial Loss
Benefit = BaseLineFinancialLoss - FinancialLoss;
BaseLineFinancialLoss = 500000;
FinancialLoss = AverageFraudValue * NbrCompromisedAccounts * NbrFraudPerAccountBeforeBlocked;
NbrCompromisedAccounts = NbrAccounts * CompromisedAccountRatio;
NbrAccounts = normalCI(0.9 * 10^6, 1.1 * 10^6);
CompromisedAccountRatio = triangular(0, 0.0001, 0.0003);
AverageFraudValue = normalCI(100, 1000);

Decision NbrFraudPerAccountBeforeBlocked = NbrFraudBeforeDetection, (NbrFraudBeforeDetection + NbrFraudDuringInvestigation);
Decision NbrFraudBeforeDetection = (1 / ContinuousTrueAlertRate) , (NbrFraudPerCompromisedAccountPerDay / BatchTrueAlertRate);

NbrFraudPerCompromisedAccountPerDay = normalCI(1, 20);
NbrFraudDuringInvestigation = NbrFraudPerCompromisedAccountPerDay * InvestigationDelay;
InvestigationDelay = triangular(1/24, 1/3, 1);
Decision ContinuousTrueAlertRate = ContinuousAlertThreshold, 0.75;
Decision ContinuousAlertThreshold = triangular(0.75, 0.85, 0.95), triangular(0.65, 0.75, 0.85), triangular(0.55, 0.65, 0.75);
Decision BatchTrueAlertRate = BatchAlertThreshold, 0.8;
Decision BatchAlertThreshold = triangular(0.75, 0.85, 0.95), triangular(0.65, 0.75, 0.85), triangular(0.55, 0.65, 0.75);


# Investigation Load
NbrAlerts = NbrTrueAlerts + NbrFalseAlerts;
NbrTrueAlerts = NbrFraud * TrueAlertRate;
NbrFalseAlerts = NbrLegitTransactions * (1 - TrueNegativeRate);
Decision TrueAlertRate = ContinuousTrueAlertRate, BatchTrueAlertRate;
Decision TrueNegativeRate = ContinuousTrueNegativeRate, BatchTrueNegativeRate;
Decision ContinuousTrueNegativeRate = ContinuousClassierTrueNegativeRate, 0.99;
Decision ContinuousClassierTrueNegativeRate = triangular(0.95, 0.99, 0.995), triangular(0.99, 0.995, 0.999), triangular(0.995, 0.999, 0.9999);
Decision BatchTrueNegativeRate = BatchClassifierTrueNegativeRate, 0.995;
Decision BatchClassifierTrueNegativeRate = triangular(0.95, 0.99, 0.995), triangular(0.99, 0.995, 0.999), triangular(0.995, 0.999, 0.9999);
NbrFraud = NbrAccounts * CompromisedAccountRatio * triangular(0, 3, 10);
NbrLegitTransactions = NbrAccounts  * triangular(0, 3, 10);
